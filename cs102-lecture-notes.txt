git init: initializes a new Git repository in your current directory, creating a new .git directory to hold all the repository data.

git add: adds files to the staging area, preparing them to be committed. You can add specific files with git add <filename> or add all changes with git add ..

git commit: creates a new commit with the changes in the staging area. You can provide a commit message with the -m flag, like git commit -m "Added new feature X".

git status: shows the current status of your repository, including any changes that have been made since the last commit.

git log: shows a history of all the commits in your repository, including the commit message, author, and timestamp.

git branch: creates a new branch or lists all the existing branches in your repository. You can create a new branch with git branch <branchname>.

git checkout: switches to a different branch, or restores a file to a previous commit. To switch branches, use git checkout <branchname>.

git merge: merges changes from one branch into another. For example, to merge changes from a branch named feature-branch into your current branch, you would run git merge feature-branch.

git pull: fetches the latest changes from a remote repository and merges them into your local repository. This is commonly used when working with others on a project.

git push: pushes your local commits to a remote repository, making them available to others who are working on the same project. You can push your changes to a specific branch with git push <remote> <branch>.

I have learned that Git is a powerful tool for managing versions of code and collaborating with others. The first step in using Git is to initialize a new repository using the git init command, which creates a .git directory in your project where all the version control information is stored. The git add command is used to add files to the staging area, preparing them for committing with the git commit command. The git status command shows the current state of the repository, including any changes that have been made and which files are staged for committing. The git log command shows a history of all the commits in the repository, while the git branch command is used to create new branches for multiple collaborators. The git checkout command switches between branches and restores files to a previous state. The git merge command merges changes from one branch into another, and git pull updates the local repository with changes from a remote repository. The git push command pushes local changes to a remote repository, while git clone creates a copy of a remote repository on your local machine.